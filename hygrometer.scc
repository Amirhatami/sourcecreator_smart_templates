

/*< + params_struct instanceregional />*/
/*< + climate_module_handler instanceregional />*/



/*<  constants singleshot >*/

#define HUMIDITY_TAG_PUB_NO_CHANGE_INTEVAL (15 * 60 * 1000)
#define HUMIDITY_TAG_PUB_VALUE_CHANGE 5.0f
/*</ constants >*/



/*<  params_struct_members instanceregional >*/
event_param_t /*<@hygro_name/>*/;
/*</ params_struct_members >*/



/*< normal_mode singleshot instanceregional >*/
bc_module_climate_set_update_interval_hygrometer(UPDATE_NORMAL_INTERVAL);
/*</ normal_mode >*/

/*<  climate_module_init singleshot instanceregional >*/
bc_module_climate_set_update_interval_hygrometer(UPDATE_SERVICE_INTERVAL);
/*</ climate_module_init >*/



/*< climate_module_event_handler_case singleshot instanceregional >*/
case BC_MODULE_CLIMATE_EVENT_UPDATE_HYGROMETER:
    if (bc_module_climate_get_pressure_pascal(&value))
    {
        /*< hygro_event_handler_case_content broadcast />*/
    }
    break;
/*</ climate_module_event_handler_case >*/

/*< hygro_event_handler_case_content instancelocal >*/
if (bc_module_climate_get_/*<@hygro_name/>*/_percentage(&value))
{
    if ((fabs(value - params./*<@hygro_name/>*/.value) >= HUMIDITY_TAG_PUB_VALUE_CHANGE) || (params./*<@hygro_name/>*/.next_pub < bc_scheduler_get_spin_tick()))
    {
        bc_radio_pub_/*<@hygro_name/>*/(BC_RADIO_PUB_CHANNEL_R3_I2C0_ADDRESS_DEFAULT, &value);
        params./*<@hygro_name/>*/.value = value;
        params./*<@hygro_name/>*/.next_pub = bc_scheduler_get_spin_tick() + HUMIDITY_TAG_PUB_NO_CHANGE_INTEVAL;
    }
}
/*</ hygro_event_handler_case_content >*/
